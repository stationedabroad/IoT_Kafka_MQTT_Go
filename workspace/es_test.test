// to allow write
curl -XPUT -H "Content-Type: application/json" http://localhost:9200/_all/_settings -d '{"index.blocks.read_only_allow_delete": true}'

// use this one to allow writes
curl -XPUT -H "Content-Type: application/json" http://localhost:9200/_all/_settings -d '{"index.blocks.read_only_allow_delete": null}'


-------------------------------------------
// ELASTIC SEARCH CONFIG
// add new index with mapping
curl -XPUT 127.0.0.1:9200/mqtt -H "Content-Type: application/json"  -d '
{
  "mappings": {
    "properties": { 
      "location": { "type": "geo_point"  }  
    }
  }
}'

// then allow entries
curl -XPUT -H "Content-Type: application/json" http://localhost:9200/_all/_settings -d '{"index.blocks.read_only_allow_delete": null}'

------------------------------------------------

// Post dockercompose UP start Golang-Kafka
sudo docker run --name go_kafka --net=iot_kafka_mqtt_go_default --rm -it -d -v /home/stationedabroad/Documents/go/IoT_Kafka_MQTT_Go/IoT_Kafka_MQTT_Go/workspace:/go/src/workspace 0a79ece08889

// KAFKA-1 create topic:
kafka-topics --zookeeper zookeeper:2181 --topic mqtt_messages --create --partitions 3 --replication-factor 2

// Confluent Schema Registry

query -> curl -X GET http://localhost:8081/subjects/mqtt_messages-value/versions/
delete -> curl -X DELETE http://localhost:8081/subjects/mqtt_messages-value/versions/4



// KSQL
print "mqtt_messages";
show topics;

ksql> create stream mqttunplugged 
with (KAFKA_TOPIC='mqtt_messages',
value_format='AVRO');




------------------------------------------------------------------------------------------------------------------------
// images starts
1) elastic search:

sudo docker run -d --name my_es --net=iot_kafka_mqtt_go_default --rm -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" 929d271f1798

1b) Kibana:

sudo docker run --name=kb --rm --net=iot_kafka_mqtt_go_default -d -p 5601:5601 -e ELASTICSEARCH_HOSTS=http://my_es:9200 kibana:7.5.2


2) Golang:

sudo docker run --name go_kafka --net=iot_kafka_mqtt_go_default --rm -it -d -v /home/stationedabroad/Documents/go/IoT_Kafka_MQTT_Go/IoT_Kafka_MQTT_Go/workspace:/go/src/workspace 0a79ece08889

3) Grafana:

sudo docker run --name=grafana -d -p 3000:3000 grafana/grafana

4) docker-compose up (/home/stationedabroad/Documents/go/IoT_Kafka_MQTT_Go/IoT_Kafka_MQTT_Go)
